# define libraries to use
import numpy as np
import pandas as pd
import requests,json

"""
Reads csv generated by nysreg-vin-decode.py and processed via nysreg-vin-fixdoublequotes.py
and outputs a csv without duplictes and with only the neccessary columns
"""

def GoodVPICDecode(picDecodeResult):
	return (picDecodeResult in {'0','0,10','1,10','1,400','1,10,400'})

nydmvVinColumns = [ 
    'entry', 'ORIG_VIN', 'ABS', 'AdaptiveCruiseControl', 'AdaptiveDrivingBeam', 'AdaptiveHeadlights', 'AutoReverseSystem', 
    'AutomaticPedestrianAlertingSound', 'BlindSpotIntervention', 'BlindSpotMon', 'BodyClass', 'CIB', 'CurbWeightLB', 
    'DaytimeRunningLight', 'Doors', 'DriverAssist', 'DynamicBrakeSupport', 'EDR', 'ESC', 'EngineCylinders', 'ErrorCode', 'ForwardCollisionWarning', 
    'GCWR', 'GCWR_to', 'GVWR', 'GVWR_to', 'LaneCenteringAssistance', 'LaneDepartureWarning', 'LaneKeepSystem', 'LowerBeamHeadlampLightSource', 
    'Make', 'MakeID', 'Manufacturer', 'ManufacturerId', 'Model', 'ModelID', 'ModelYear', 'NCSABodyType', 'NCSAMake', 'NCSAModel', 'ParkAssist', 
    'PedestrianAutomaticEmergencyBraking', 'RearAutomaticEmergencyBraking', 'RearCrossTrafficAlert', 'Seats', 'SemiautomaticHeadlampBeamSwitching', 'Series',
    'Series2', 'SuggestedVIN', 'TPMS', 'TractionControl', 'Trim', 'Trim2', 'VIN', 'VehicleType', 
]

# original code to clean csv file, took about 1:30 hr to run
print("Reading csv generated by nysreg-vin-decode.py and processed via nysreg-vin-fixdoublequotes.py")
nydmvVinDecodeDf = pd.read_csv("tmp/nydmvvin-goodhdr/NYDMV-VIN-OUTPUT-merged-fixedquotes.csv", skipinitialspace = True, quotechar="'", usecols=nydmvVinColumns,on_bad_lines="warn",low_memory=False)

# idenfity columns with valid decodes
nydmvVinDecodeDf["GoodVPICDecode"] = nydmvVinDecodeDf.apply(lambda row: GoodVPICDecode(row["ErrorCode"]),axis=1)

#nydmvVinDecodeDf.to_pickle("tmp/nydmvvin-goodhdr/NYDMV-VIN-OUTPUT-merged-fixedquotes.pkl")

print("Locating VIN with API connection errors...")
# finx VINs with API connection errors and null VIN column
idx = nydmvVinDecodeDf[( nydmvVinDecodeDf["ABS"].isin([
    'Error encountered retrieving data: A severe error occurred on the current command.  The results, if any, should be discarded.\\r\\nA severe error occurred on the current command.  The results, if any, should be discarded.',
    'Error encountered retrieving data: A transport-level error has occurred when sending the request to the server. (provider: TCP Provider, error: 0 - An existing connection was forcibly closed by the remote host.)'
    ]) | nydmvVinDecodeDf["ParkAssist"].isin(["Bumper Hitch'", '22 to 30 ft bed. Updated Grote electrical system with optional pullout lights']) | 
    nydmvVinDecodeDf["PedestrianAutomaticEmergencyBraking"].isin(['centralized grease system']) | 
    nydmvVinDecodeDf["RearCrossTrafficAlert"].isin(['UNITED STATES (USA)']) | nydmvVinDecodeDf["VIN"].isna() | ~nydmvVinDecodeDf["GoodVPICDecode"]) & ~nydmvVinDecodeDf["ORIG_VIN"].isna()].index
len(idx)
if len(idx) > 0:
    url = 'https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVINValuesBatch/'
    numBatch = 0
    totRows = len(idx)
    for startRow in range(0,totRows,50):
        print(" "*80,"\r",startRow,end="")
        lastRow = min(startRow + 50, totRows)
        post_fields = {'format': 'json', 'data':nydmvVinDecodeDf.iloc[idx[startRow:lastRow]]["ORIG_VIN"].to_csv(None,index=False,line_terminator=';',header=False)[:-1] }
        r = requests.post(url, data=post_fields)
        vpicResults = r.json()["Results"]
        for resIdx in range(0,lastRow-startRow):
            #print(nydmvVinDecodeDf.iloc[idx[resIdx+startRow]]["ORIG_VIN"])
            for col in vpicResults[resIdx].keys():
                if col in nydmvVinDecodeDf.columns:
                    if vpicResults[resIdx][col] == "":
                        nydmvVinDecodeDf.at[idx[resIdx+startRow],col] = np.nan
                    else:    
                        nydmvVinDecodeDf.at[idx[resIdx+startRow],col] = vpicResults[resIdx][col]
        print(end="\r")
    print()
#nydmvVinDecodeDf.to_csv("tmp/nydmvvin-goodhdr/NYDMV-VIN-OUTPUT-merged-fixedquotes-cols.csv",index=False)
#nydmvVinDecodeDf.iloc[idx]

# idenfity columns with valid decodes
nydmvVinDecodeDf["GoodVPICDecode"] = nydmvVinDecodeDf.apply(lambda row: GoodVPICDecode(row["ErrorCode"]),axis=1)

print("Eliminating duplicate rows")
nydmvVinDecodeDf.drop_duplicates(inplace=True)
print("Write new corrected pkl and csv with desired columns")
nydmvVinDecodeDf.to_pickle("tmp/nydmvvin-goodhdr/NYDMV-VIN-OUTPUT-merged-fixedquotes-cols.pkl")
nydmvVinDecodeDf.to_csv("tmp/nydmvvin-goodhdr/NYDMV-VIN-OUTPUT-merged-fixedquotes-cols.csv",index=False)
print(nydmvVinDecodeDf.info())
